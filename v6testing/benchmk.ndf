# this file contains programs to benchmark the speed of Q'Nial
in various versions and on different hardware.

timed is tr f op a {t := time; f a; time - t}

scantest is {
   Str gets 5000 reshape 'a 3.145 33 alongerid ''a string constant'' "phrase ';
   timed scan Str }

parse1test is { LOCAL a;
   Tokens gets scan (1000 reshape 'a 3.145 33 ');
   timed (ITERATE parse) (3 reshape [Tokens]) }

parse2test is { LOCAL a;
   Tokens gets scan (1000 reshape 'a ');
   timed parse Tokens }

parse3test is {
   Tokens gets scan link (100 reshape ['if l then 1 else 2 endif; ']);
   timed parse Tokens }

arith1test is {
   Parsetree gets parse scan link (10 reshape ['3. * 2. - 5. + '] append '1.');
   timed (iterate eval) (50 reshape [Parsetree]) }

arith2test is {
   a gets 500 reshape 3.;
   b gets 500 reshape 2.;
   c gets 500 reshape 5.;
   d gets 500 reshape 1.;
   Parsetree gets parse scan link (5 reshape ['a * b - c + '] append 'd');
   timed eval Parsetree }

loop1test is {
   Parsetree gets parse scan 'x gets 0;while x < 500 do x gets x+1 endwhile;';
   timed eval Parsetree }

loop2test is {
   Parsetree gets parse scan 'x gets 0;for i with count 500 do x gets x + 1 endfor;';
   timed eval Parsetree }

each1test is {
   Parsetree gets parse scan 'each pass count 1500';
   timed eval Parsetree }

each2test is {
   Parsetree gets parse scan 'each (max tell) count 200';
   timed eval Parsetree }

structtest is {
  a gets 5 15 10 reshape 'abc';
  Parsetree gets parse scan 'reverse mix rows transpose reverse a';
   timed eval Parsetree }

binaryoptest is {
bintest is op n m {
  x gets 0 find tell n pick reverse tell n;
  y gets [m - 1] pick tell m find tell m;
  z gets m reshape n;
  w gets m hitch [n] append n;
  x y hitch w z
};
test is op n m {
  tries gets m reshape [n m];
  ITERATE bintest tries;
};
Cases := [2 1,2 10,2 10];
timed ITERATE test Cases }

pervtest is {
arithtest is op a {
  x gets a + a - a * a / a;
  y gets ceiling a mod floor a quotient 2;
  sum x y
};
test is op n m {
  a gets n reshape count m * random 1;
  tries gets m reshape [a];
  ITERATE arithtest tries;
};
Cases := [Null 50,1 50,10 20,100 5];
timed ITERATE test Cases }

Tests gets "scantest "parse1test "parse2test "parse3test "arith1test
  "arith2test "loop1test "loop2test "each1test "each2test "structtest
  "binaryoptest "pervtest;

run is {
 average is div[sum,tally];
 N gets 1000;
 T := Time;
 Res gets shape Tests reshape 0.;
 for i with grid Tests do
   Res@i gets EACH execute (N reshape [Tests@i]);
   write Tests@i (Res@i);
 endfor;
 write link 'Total time: ' (string (Time - T)); }

