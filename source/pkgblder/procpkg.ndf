
# procpkg.ndf


# created by Mike Jenkins
  September 15, 1995
  Last modified by Mike May 2006.

# This file processes the global initalization files to produce
     basics.c
     basics.h
     defs.ndf & defstbl.h
appropriate to the Q'Nial package being created.

# features 1) allows blank lines in allprims.nh files and package files
           2) lines can be commented out by placing a
              # symbol at the very beginning of a line


settrigger o;  % avoid faults for directory creation failures;





geninitcall IS OP Primname Prop {
   link 'init_primname("' Primname '",''' Prop ''');' }

# we use the first version of insertslash in case regexp is not implemented

insertslash is OP Str {
    EscapeChars := '"\';
    NewStr := Null;
    FOR c WITH Str DO
      IF c in EscapeChars THEN
        NewStr := NewStr append `\;
      ENDIF;
      NewStr := NewStr append c;
    ENDFOR;
    NewStr
}

#
insertslash is OP Str {
    regexp_substitute '("|\\)' '\\$1' Str 'g' }


# routine to build the table

mkstrtbl IS OP Tblnm Filename Isstatic {
  Lines := EACH insertslash getfile Filename;
  Lines := '"' EACHRIGHT link Lines EACHLEFT link '",';
  Tbl := link 
           [link '#define NOLINES ' (string tally Lines),'']
           [ link (IF Isstatic THEN 'static ' ELSE '' ENDIF)
                'char *' (string Tblnm) '[' (string tally Lines) '] = {' ] 
           Lines 
           ['};'];
  Tbl };


  unpad IS OP st { parts :=  (match st ` ) cut st;
                   link ((first parts) (eachleft link (rest parts) ' '))
                   }; 


spliton IS OP splitter str {
  (match splitter@0 str) cut str 
}

ProcessPackage IS OP Srcdir Pkgname {
  Pkglist := getfile Pkgname;
% separate version name first line from the rest of the lines;
  Versionname Pkglist := [first,rest] Pkglist;
%remove empty lines;
  Pkglist := FILTER ([]~=) Pkglist;
% remove lines beginning with #;
  Pkglist := FILTER (`#~=first) Pkglist;
% The package file lines have the following format:;
%  <switch name> <ndf file name> 
% If the file name is "-", no file is needed.;
  Lines := EACHRIGHT spliton  ' ' Pkglist;
% convert to the lists of the fields:;
  Switches Ndfnames := flip EACH (2 take) Lines;
% filter out the "-"'s:;
  Ndfnames := FILTER ('-'~=) Ndfnames;
% The next section processes the names of Q'Nial primitives;
% included in the package by placing the primitive name(s) in the;
% apply table(s) and by generating a call on init_primname for;
% each to be included in the initialization code.;
% initialize dispatch tables and lists :;
  Unarydisp := [ 'void (*applytab[])() = {' ];
  Binarydisp := [ 'void (*binapplytab[])() = {' ];
  Nmlist := Null;
  Initlist := Null;
% The allprims.nh file is processed by the following to ;
% gather the routine names for basics.h and to create the function ;
% lists and initialization routine for basics.c.;
  IF Versionname in 'V4SHELL' 'V4WINSHL' THEN
    Entries := getfile "v4shellprims.nh;
  ELSEIF Versionname in 'V6SHELL' 'V6WINSHL' THEN
    Entries := getfile "v6shellprims.nh;
  ELSE  
    Entries := getfile "allprims.nh;
  ENDIF;
  Entries := FILTER ([]~=) Entries;
  Entries := FILTER (`#~=first) Entries;
  FOR I WITH tell tally Entries DO
    Pieces := spliton ' ' Entries@I;
    Sw Prop Primname Ufname := 4 take Pieces;
    IF Sw in Switches THEN
      Unarydisp := Unarydisp append (Ufname link ',');
      Nmlist := Nmlist append Ufname;
      Initlist := Initlist append geninitcall (toupper Primname) (first Prop);
      IF tally Pieces > 4 THEN
        Bfname :=  last Pieces; 
        Binarydisp := Binarydisp append (Bfname link ',');
        Nmlist := Nmlist append Bfname;
      ENDIF;
    ENDIF;
  ENDFOR;
%  Complete the dispatchers and generate the initprims routine:;
  Unarydisp := Unarydisp link ['};'];
  Binarydisp := Binarydisp link ['};'];
  Initprims := link [ 'void initprims()', '{' ] Initlist ['}'];
%  Now build the lines for basics.c;
  Basicsc := link [
    '/*================================================================',
    '',
    '                MODULE BASICS.C     ',
    '',
    '      This module contains the unary and binary dispatch tables used to',
    '      access all the Nial primitives that are written in C.',
    '      It also contains the routine that dynamically links the Nial',
    '      name for the primitive to its slot in the dispatch table.',
    '',
    '================================================================',
    '',
    'COPYRIGHT NIAL Systems Limited  1983-2006',
    '',
    'GENERATED by procpkg.ndf',
    '',
    '================================================================*/',
    '',
   '#include "basics.h"',
   ''] [''] Unarydisp [''] Binarydisp [''] Initprims ;
%  output basics.c ;
  putfile (link Srcdir Separator 'basics.c') Basicsc;
% process the name list to create basics.h info;
  Basicsh := [
    '/* BASICS.H */',
    '',
    'extern void init_primname(char * primname,char prop);',
    'extern void initprims(void);',
    'extern void (*applytab[]) (void);',
    'extern void (*binapplytab[]) (void);',
    ''];
  FOR Nm WITH Nmlist DO
    Basicsh := Basicsh link [link 'extern void ' Nm '(void);'];
  ENDFOR;
  putfile (link Srcdir Separator 'basics.h') Basicsh;
% code to process the definition files.;
  Defs := link (EACH getfile Ndfnames EACHLEFT append '');
  Defsfnm := link Srcdir Separator 'defs.ndf';
  putfile Defsfnm Defs;
%  work to build the defstbl.h file used by nial.c in initialization;
  Defstbl := link [
    '/*==================================================================',
    '',
    '            defsndf.h',
    '',
    '   GENERATED by procpkg.ndf',
    '',
    '==================================================================*/',
    '' ] (mkstrtbl 'defsndf' Defsfnm True);
  putfile (link Srcdir Separator 'defstbl.h') Defstbl;
%  work to build the package switches file;
  Pkgswchs := [
    '/*==================================================================',
    '',
    '            pkgswchs.h',
    '',
    '   GENERATED by procpkg.ndf',
    '',
    '==================================================================*/',
    '' ];
  FOR Sw with Switches DO
     Pkgswchs := Pkgswchs append link '#define ' Sw;
  ENDFOR;
  putfile (link Srcdir Separator 'pkgswchs.h') Pkgswchs;
} 

# the following 2 routines are copied from niallib. We use them directly in case
this script is run from a version that is used prior to setting up nialroot.

newhost IS OPERATION Comm { 
    IF System = "Windows THEN 
       host ( link ( getenv 'COMSPEC' ) ' /c ' Comm ' > \tmp\cmd_res' ) ; 
       getfile '\tmp\cmd_res' 
    ELSEIF System = "UNIX THEN 
       Svt := settrigger o ; 
       Fh := open Comm 'pr' ; 
       IF not isfault Fh THEN 
          Res := Null ; 
          WHILE not isfault ( Line := readfile Fh ) DO 
             Res := Res append Line ; 
          ENDWHILE ; 
          close Fh ; 
          settrigger Svt ; 
          Res
       ELSE 
          settrigger Svt ; 
          fault ( link '?Failed to open pipe to: ' Comm ) 
       ENDIF 
    ELSE 
       fault link '?newhost: Pipes not available in System = ' ( 
       string System ) ; 
    ENDIF } 

filelist IS OPERATION Pattern {  
    fix IS OPERATION Pairname { 
       X := ( match Pairname `  ) cut Pairname ; 
       IF tally X = 2 THEN 
          link ( first X ) '.' ( second X ) 
       ELSE 
          first X 
       ENDIF } ; 
    IF System = "Windows THEN 
       host ( link ( getenv 'COMSPEC' ) ' /c dir /b ' ( string 
       Pattern ) ' > \tmp\tmp_pkgs' ) ; 
       Allpkgs := getfile '\tmp\tmp_pkgs' ;  
    ELSEIF System = "UNIX THEN 
       Allpkgs := newhost ( link '\ls -da ' ( string Pattern ) ) ; 
    ELSE 
       Allpkgs := fault link '?filelist: no code for System = ' ( 
       string System ) ; 
    ENDIF ; 
    Allpkgs } 



Processapkg IS {
  Srcdir := '..';
  Allpkgs := filelist '*.pkg';
  writescreen 'Available Packages:';
  FOR i WITH tell tally Allpkgs DO
    writescreen (link ' ' (string i)') ' (string Allpkgs@i));
  ENDFOR;
  writescreen 'Enter a single package number:';
  res := readscreen '> ';
  Pkg := (execute res) pick Allpkgs;
  writescreen 'You have chosen:';
  write Pkg;
  Srcdir Processpackage Pkg;
  }

Processapkg; Bye


